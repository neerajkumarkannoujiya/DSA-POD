Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]
Example 2:


Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]
 

Constraints:

The number of nodes in the list is n.
1 <= k <= n <= 5000
0 <= Node.val <= 1000









********************************************************************************************************************************************************************************************







/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    ListNode reverseK(ListNode head, int k,int t){
        ListNode curr = head;
        ListNode prev = null;
        ListNode Next = null;
        if(t==0){
            return head;
        }
        int count=0;
        while(curr!=null && count<k){
            Next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = Next;
            count++;
        }
        
        if(Next!=null){
            head.next = reverseK(Next,k,t-1);
        }
        return prev;
    }

    public ListNode reverseKGroup(ListNode head, int k) {
        int n=0;
        ListNode temp = head;
        while(temp!=null){
            n++;
            temp = temp.next;
        }
        int t = n/k;
        ListNode rev = reverseK(head,k,t);
        return rev;
        
    }
}
