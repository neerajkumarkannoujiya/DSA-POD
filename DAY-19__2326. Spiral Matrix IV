You are given two integers m and n, which represent the dimensions of a matrix.

You are also given the head of a linked list of integers.

Generate an m x n matrix that contains the integers in the linked list presented in spiral order (clockwise), starting from the top-left of the matrix. If there are remaining empty spaces,
fill them with -1.

Return the generated matrix.

 

Example 1:


Input: m = 3, n = 5, head = [3,0,2,6,8,1,7,9,4,2,5,5,0]
Output: [[3,0,2,6,8],[5,0,-1,-1,1],[5,2,4,9,7]]
Explanation: The diagram above shows how the values are printed in the matrix.
Note that the remaining spaces in the matrix are filled with -1.
Example 2:


Input: m = 1, n = 4, head = [0,1,2]
Output: [[0,1,2,-1]]
Explanation: The diagram above shows how the values are printed from left to right in the matrix.
The last space in the matrix is set to -1.
 

Constraints:

1 <= m, n <= 105
1 <= m * n <= 105
The number of nodes in the list is in the range [1, m * n].
0 <= Node.val <= 1000













********************************************************************************************************************************************************






class Solution {
    public int[][] spiralMatrix(int r, int c, ListNode head) {
        int arr[][] = new int[r][c];
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                arr[i][j] = -1;
            }
        }
        ListNode ptr = head;
        int trow = 0;
        int lrow = r - 1;
        int rcol = c - 1;
        int lcol = 0;
        int dir = 0;
        while (trow <= lrow && rcol >= lcol && ptr != null) {
            if (dir == 0) {
                for (int i = lcol; (i <= rcol) && ptr != null; i++) {
                    arr[trow][i] = ptr.val;
                    ptr = ptr.next;
                }
                trow++;
            } else if (dir == 1) {
                for (int i = trow; i <= lrow && ptr != null; i++) {
                    arr[i][rcol] = ptr.val;
                    ptr = ptr.next;
                }
                rcol--;
            } else if (dir == 2) {
                for (int i = rcol; i >= lcol && ptr != null; i--) {
                    arr[lrow][i] = ptr.val;
                    ptr = ptr.next;
                }
                lrow--;
            } else if (dir == 3) {
                for (int i = lrow; i >= trow && ptr != null; i--) {
                    arr[i][lcol] = ptr.val;
                    ptr = ptr.next;
                }
                lcol++;
            }
            dir = (dir + 1) % 4;
        }
        return arr;
    }
}






***************************************************************************************************************************************************************************







class Solution {
    public int[][] spiralMatrix(int r, int c, ListNode head) {
        int arr[][] = new int[r][c];
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                arr[i][j] = -1;
            }
        }
        ListNode ptr = head;
        int trow = 0;
        int lrow = r - 1;
        int rcol = c - 1;
        int lcol = 0;
        int dir = 0;
        while (ptr != null) {
            for (int i = lcol; (i <= rcol) && ptr != null; i++) {
                arr[trow][i] = ptr.val;
                ptr = ptr.next;
            }
            trow++;

            for (int i = trow; i <= lrow && ptr != null; i++) {
                arr[i][rcol] = ptr.val;
                ptr = ptr.next;
            }
            rcol--;

            for (int i = rcol; i >= lcol && ptr != null; i--) {
                arr[lrow][i] = ptr.val;
                ptr = ptr.next;
            }
            lrow--;

            for (int i = lrow; i >= trow && ptr != null; i--) {
                arr[i][lcol] = ptr.val;
                ptr = ptr.next;
            }
            lcol++;

        }
        return arr;
    }
}
